#!/usr/bin/env python

# Author: Mike Chester <mchester@uvic.ca>
# Copyright (C) 2013 University of Victoria
# You may distribute under the terms of either the GNU General Public
# License or the Apache v2 License.

import sys
import json
import pika
import time
import netifaces
import uuid
import socket
import logging
import urllib
import urllib2

from shoal_agent import config
config.setup()

# Time interval to send data
INTERVAL = config.interval
PRIVATE_ADDRESS = ('10.','172.','192.')
LOG_FORMAT = '%(asctime)s - %(levelname)s - [%(filename)s:%(lineno)s] - %(message)s'

# AMQP configurations
HOST = "{0}/{1}".format(config.amqp_server_url, urllib.quote_plus(config.amqp_virtual_host))

def amqp_send(data, topics=['info']):
    routing_key = ''
    for topic in topics:
        routing_key += topic + '.'
    routing_key = routing_key.strip('.')
    logging.info('AMQP routing key: {0}'.format(routing_key))
    try:
        connection = pika.BlockingConnection(pika.URLParameters(HOST))
        channel = connection.channel()
        channel.basic_publish(exchange=config.amqp_exchange,
                              routing_key=routing_key,
                              body=data,
                              properties=pika.BasicProperties(content_type='application/json'))
        connection.close()
    except pika.exceptions.AMQPConnectionError as e:
        raise pika.exceptions.AMQPConnectionError

def get_load_data(interface):
    path = '/sys/class/net/{0}/statistics/tx_bytes'.format(interface)
    logging.info("Path to '{0}' load data: {1}".format(interface, path))
    try:
        with open(path) as tx:
            tx1 = int(tx.read())
        time.sleep(1)
        with open(path) as tx:
            tx2 = int(tx.read())

        return (tx2 - tx1) / 1024
    except IOError as e:
        logging.error("Path '{0}' does not exist. Please change NIC to monitor in configuration file.".format(path))
        sys.exit(1)
    except Exception as e:
        logging.error(e)
        sys.exit(1)

def get_ip_addresses():
    public = {}
    private = {}
    for interface in netifaces.interfaces():
        try:
            for link in netifaces.ifaddresses(interface)[netifaces.AF_INET]:
                if link['addr'].startswith(PRIVATE_ADDRESS):
                    private[interface] = link['addr']
                elif not link['addr'].startswith('127.'):
                    public[interface] = link['addr']
        except Exception as e:
            continue
    logging.info('Public IPs found: {0}, Private IPs found: {1}'.format(public, private))
    return public, private

def main():
    try:
        logging.basicConfig(level=logging.ERROR, format=LOG_FORMAT, filename=config.log_file)
    except IOError as e:
        print "Could not set logging file. Please check config file.", e
        sys.exit(1)

    data = {
            'uuid': uuid.uuid1().hex,
            'hostname': socket.gethostname(),
            'squid_port': config.squid_port
           }

    public_ip, private_ip = get_ip_addresses()
    external_ip = config.external_ip

    try:
        data['private_ip'] = private_ip.values()[0]
    except IndexError:
        pass
    
    if public_ip:
        try:
            data['public_ip'] = public_ip.values()[0]
            data['hostname'] = socket.gethostbyaddr(public_ip.values()[0])[0]
        except IndexError:
            pass
    elif external_ip:
        try:
            data['external_ip'] = external_ip
        except KeyError:
            #not sure this is needed, if it doesn't exist 
            pass
    else:
        logging.error("Shoal-Agent was unable to find a public IP or external IP for this squid. Please set an external IP in shoal-agent config file.")
        sys.exit(1)

    if config.interface:
        interface = config.interface
    elif public_ip:
        interface = public_ip.keys()[0]
    elif private_ip:
        interface = private_ip.keys()[0]
    else:
        logging.error("Unable to automatically detect interface to monitor, please set the interface to monitor in configuration file.")
        sys.exit(1)

    while True:
        try:
            data['timestamp'] = time.time()
            data['load'] = get_load_data(interface)
            try:
                amqp_send(json.dumps(data))
            except pika.exceptions.AMQPConnectionError as e:
                logging.error("Could not connect to AMQP Server. Attempting to connect in {0}s...".format(INTERVAL))
            time.sleep(INTERVAL)
        except KeyboardInterrupt, KeyError:
            sys.exit()

if __name__ == '__main__':
    main()
